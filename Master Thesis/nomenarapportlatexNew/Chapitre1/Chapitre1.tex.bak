%------------------------------début entêtes-----------------------------------------
\pagestyle{fancy}

\renewcommand{\footrulewidth}{1pt}

\fancyhead[L]{\footnotesize \rightmark}
\fancyhead[C]{\thepage}
\fancyhead[R]{Radicalisation}

\fancyfoot[L]{Ramiandrisoa Faneva}
\fancyfoot[C]{\thepage}
\fancyfoot[R]{Extraction d'information}

%------------------------------fin entêtes-------------------------------------------

\chapter{Radicalisation}

\qquad La racinisation ou désuffixation est un procédé de transformation à partir duquel on obtient le radical  ou la racine d'un mot. La racine d'un mot est le reste de ce mot après suppression de son (ses) suffixe(s) et préfixe(s). Cette racine ne correspond généralement pas un mot réel, par exemple le mot « experience » a pour radical « experi » qui n'est pas un mot réel. Mais dans certain cas, on obtient un mot réel comme racine.
Les méthodes de racinisation sont souvent basées sur un ensemble de règles  de désuffixation rédigé au préalable et sur une liste de suffixes/préfixes de la langue concernée.
Plusieurs algorithmes ont été réalisés dans le cas de la racinisation, mais les plus connus ont été réalisés  par Julie Beth Lovins (1968) et Martin Porter (1980). On retrouve souvent la racinisation dans les applications de traitement automatique du langage naturel, à ne citer à titre d'exemple que la recherche d'information ou la traduction automatique.

\section{Algorithme de Porter}
\qquad L'algorithme de Porter est composé d'une cinquantaine de règles de racinisation réparties en sept étapes successives. Les mots qu'il faut analyser passent par tous les étapes et, si plusieurs règles va leur être appliquées, il considère toujours que celle comprenant le plus long suffixe. Cet algorithme possède, en plus des précédents règles, cinq autres règles de contexte, qui fournissent des conditions de suppression des suffixes. Comme par exemple, pour un mot tel que son radical n'est pas composé d'au moins une voyelle, on ne supprime pas sa terminaison. C'est le cas du mot « sing » qui restera « sing » au lieu d'avoir comme radical « s ».
Il est à noter que l'algorithme de Porter qu'on va détailler est adapté à la langue anglaise.

\subsection{Détail de l'algorithme de Porter \cite{porter}}
\noindent Considérons les variables suivants :
\begin{itemize}[leftmargin=1.0in]
	\item C : une suite de consonnes
	\item V : une suite de voyelles
\end{itemize}

\noindent Les mots anglais  peuvent être représentés sous les formes suivantes :
\begin{itemize}[leftmargin=1.0in]
	\item CVCVCV…V
	\item CVCVCV…C
	\item VCVCVC…V
	\item VCVCVC…C
\end{itemize}

\noindent D'une manière générale, on peut donc les représenter par [C]VCVC…[V] ou par [C](VC)m[V] où m est appelée « mesure d'un mot ». Pour chaque mot, il y a une valeur de  m.

\smallskip

\noindent \underline{exemple} :
\begin{itemize}[leftmargin=1.0in]
	\item pour le mot « tree », m vaut 0
	\item pour le mot « trouble », m vaut 1
	\item pour le mot « oaten », m vaut 2
\end{itemize}

\noindent On va considérer que les règles de racinisation sont exprimées sous la forme (condition) S1 $\rightarrow$ S2. C'est à dire que pour un mot se terminant par un suffixe S1 et que le radical remplit la condition, alors on remplace le suffixe S1 par S2.

\smallskip

\noindent Voici les conditions, mentionnées ci-dessus, à remplir pour le désuffixation :
\begin{itemize}[leftmargin=1.0in, label=$\blacklozenge$]
	\item $\ast$ e : le radical se termine par la lettre « e »
	\item $\ast$v$\ast$ : le radical contient une voyelle
	\item $\ast$d : le radical se termine par une consonne doublée
	\item $\ast$o : le radical se termine par « cvc » où le second c n'est ni w, ni x, ni y
\end{itemize}

\noindent On peut utiliser les opérateurs booléens que voici : et, ou, non

\smallskip

\noindent Le tableau suivant présente tout ce qui se passe pendant les 7 étapes de l'algorithme de porter. Les 7 étapes sont réparties sur 5 phases dont le premier phase est divisé en 3 petites phases.  

\smallskip

\noindent Pour chaque étape, la seule règle qui s'applique est la règle  capturant le plus long S1.
\newpage
\begin{table}[!htbp]
	\begin{center}
		\input{Chapitre1/tableau}
		\caption{racines obtenues par le raciniseur de Porter\cite{wikipedia}}
	\end{center}
\end{table}

\qquad L'algorithme de Porter est libre et peut être implémenter dans plusieurs langages. Martin Porter, en 2000, a donné sa propre implémentation dans plusieurs langages de son propre algorithme.
